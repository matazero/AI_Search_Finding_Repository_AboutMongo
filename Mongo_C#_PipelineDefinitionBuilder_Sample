Question directed to AI : Claude Sonnet 4.5
###########################################
What is the Sample method is told in https://mongodb.github.io/mongo-csharp-driver/3.4.0/api/MongoDB.Driver/MongoDB.Driver.PipelineDefinitionBuilder.Sample.html. What is it used for ? 

Answer:
##########
Based on the documentation, the Sample method appends a $sample stage to a MongoDB aggregation pipeline Method Sample | MongoDB CSharp Driver API Reference.
What it does:
It takes a pipeline and a size parameter (long), and returns a new pipeline with an additional $sample stage Method Sample | MongoDB CSharp Driver API Reference.
What it's used for:
The $sample stage in MongoDB is used to randomly select a specified number of documents from a collection. This is useful when you need:

Random sampling - Getting a random subset of documents for testing, analysis, or preview purposes
Performance optimization - Working with a manageable subset of data instead of the entire collection
Data exploration - Quickly examining representative documents without processing all data

Question 2: Can u provide examples about Sample in given example api methods ? 
###############

Answer2:
########
// ========================================
// CONTROLLER METHODS
// ========================================
[ApiController]
[Route("api/[controller]")]
public class CategoryController : Controller
{
    private readonly CategoryService _categoryService;
    
    public CategoryController(CategoryService categoryService)
    {
        _categoryService = categoryService;
    }

    // Example 1: Get random sample of categories
    [HttpGet("random/{count}")]
    public async Task<ActionResult<List<Category>>> GetRandomCategories(int count)
    {
        var categories = await _categoryService.GetRandomCategoriesAsync(count);
        return Ok(categories);
    }

    // Example 2: Get random root categories (no parent)
    [HttpGet("random/root/{count}")]
    public async Task<ActionResult<List<Category>>> GetRandomRootCategories(int count)
    {
        var categories = await _categoryService.GetRandomRootCategoriesAsync(count);
        return Ok(categories);
    }

    // Example 3: Get random categories with their descendants
    [HttpGet("random/with-descendants/{count}")]
    public async Task<ActionResult<List<Category>>> GetRandomCategoriesWithDescendants(int count)
    {
        var categories = await _categoryService.GetRandomCategoriesWithDescendantsAsync(count);
        return Ok(categories);
    }

    // Example 4: Get random sample for preview/testing
    [HttpGet("preview")]
    public async Task<ActionResult<List<Category>>> GetCategoryPreview()
    {
        var categories = await _categoryService.GetCategorySampleForPreviewAsync(5);
        return Ok(categories);
    }
}

// ========================================
// SERVICE METHODS
// ========================================
public class CategoryService : MongoDbRepository<Category>
{
    public CategoryService(IOptions<DatabaseSettings> databaseSettings) : base(databaseSettings)
    {
    }

    // Example 1: Simple random sample
    public async Task<List<Category>> GetRandomCategoriesAsync(int count)
    {
        var pipeline = PipelineDefinition<Category, Category>
            .Create()
            .Sample(count);

        var result = await _collection.Aggregate(pipeline).ToListAsync();
        return result;
    }

    // Example 2: Random sample with filtering (only root categories)
    public async Task<List<Category>> GetRandomRootCategoriesAsync(int count)
    {
        var pipeline = PipelineDefinition<Category, Category>
            .Create()
            .Match(c => c.ParentId == null || c.ParentId == "")
            .Sample(count);

        var result = await _collection.Aggregate(pipeline).ToListAsync();
        return result;
    }

    // Example 3: Random sample with GraphLookup to get descendants
    public async Task<List<Category>> GetRandomCategoriesWithDescendantsAsync(int count)
    {
        var pipeline = PipelineDefinition<Category, Category>
            .Create()
            .Sample(count)
            .GraphLookup(
                from: _collection,
                connectFromField: "Id",
                connectToField: "ParentId",
                startWith: "$Id",
                @as: "Descendants",
                depthField: "Level"
            );

        var result = await _collection.Aggregate(pipeline).ToListAsync();
        return result;
    }

    // Example 4: Sample for preview with projection (specific fields only)
    public async Task<List<BsonDocument>> GetCategorySampleForPreviewAsync(int count)
    {
        var pipeline = PipelineDefinition<Category, BsonDocument>
            .Create()
            .Sample(count)
            .Project(Builders<Category>.Projection
                .Include(c => c.Name)
                .Include(c => c.ParentId)
                .Include(c => c.Description)
            );

        var result = await _collection.Aggregate(pipeline).ToListAsync();
        return result;
    }

    // Example 5: Weighted random sample (categories with more descendants appear more likely)
    public async Task<List<Category>> GetWeightedRandomCategoriesAsync(int count)
    {
        // First, add a field counting descendants, then sample
        var pipeline = PipelineDefinition<Category, Category>
            .Create()
            .GraphLookup(
                from: _collection,
                connectFromField: "Id",
                connectToField: "ParentId",
                startWith: "$Id",
                @as: "Descendants"
            )
            .AddFields(new BsonDocument("descendantCount", 
                new BsonDocument("$size", "$Descendants")))
            .Sample(count);

        var result = await _collection.Aggregate(pipeline).ToListAsync();
        return result;
    }

    // Example 6: Sample from categories matching a search term
    public async Task<List<Category>> GetRandomCategoriesBySearchAsync(string searchTerm, int count)
    {
        var filter = Builders<Category>.Filter.Regex(
            c => c.Name, 
            new BsonRegularExpression(searchTerm, "i")
        );

        var pipeline = PipelineDefinition<Category, Category>
            .Create()
            .Match(filter)
            .Sample(count);

        var result = await _collection.Aggregate(pipeline).ToListAsync();
        return result;
    }

    // Example 7: Sample with sorting (useful for testing)
    // Note: Sample before sort gives random docs, then sorts them
    public async Task<List<Category>> GetRandomCategoriesSortedAsync(int count)
    {
        var pipeline = PipelineDefinition<Category, Category>
            .Create()
            .Sample(count)
            .Sort(Builders<Category>.Sort.Ascending(c => c.Name));

        var result = await _collection.Aggregate(pipeline).ToListAsync();
        return result;
    }

    // Example 8: Sample for data quality check
    public async Task<List<Category>> GetRandomCategoriesForValidationAsync(int count = 10)
    {
        // Get random sample and check if they have descriptions
        var pipeline = PipelineDefinition<Category, Category>
            .Create()
            .Sample(count)
            .Match(c => c.Description == null || c.Description == "");

        var result = await _collection.Aggregate(pipeline).ToListAsync();
        return result;
    }

    // Example 9: Multi-stage with Sample in the middle
    public async Task<List<CategoryStatistics>> GetRandomCategoryStatisticsAsync(int count)
    {
        var pipeline = PipelineDefinition<Category, CategoryStatistics>
            .Create()
            .Match(c => c.ParentId != null) // Only child categories
            .Sample(count)
            .GraphLookup(
                from: _collection,
                connectFromField: "Id",
                connectToField: "ParentId",
                startWith: "$Id",
                @as: "Descendants"
            )
            .Project<CategoryStatistics>(new BsonDocument
            {
                { "Id", "$_id" },
                { "Name", "$Name" },
                { "ParentId", "$ParentId" },
                { "DescendantCount", new BsonDocument("$size", "$Descendants") }
            });

        var result = await _collection.Aggregate(pipeline).ToListAsync();
        return result;
    }
}

// Helper class for statistics
public class CategoryStatistics
{
    [BsonId]
    [BsonRepresentation(BsonType.ObjectId)]
    public string Id { get; set; }
    
    public string Name { get; set; }
    
    [BsonRepresentation(BsonType.ObjectId)]
    public string ParentId { get; set; }
    
    public int DescendantCount { get; set; }
}

// ========================================
// USAGE SCENARIOS
// ========================================

/*
USAGE SCENARIOS:

1. Data Exploration:
   GET /api/category/random/10
   - Quickly preview random categories from your collection

2. Testing:
   GET /api/category/preview
   - Get a small sample for unit testing or development

3. Performance Testing:
   GET /api/category/random/with-descendants/5
   - Test GraphLookup performance with random data

4. Data Quality Checks:
   - Use GetRandomCategoriesForValidationAsync to spot-check data integrity

5. User Experience:
   - Show random categories as suggestions or "Explore" feature

6. Analytics:
   GET /api/category/random/root/3
   - Sample root categories for dashboard widgets

7. Load Testing:
   - Generate random category queries for stress testing

IMPORTANT NOTES:
- Sample size should be less than your collection size
- $sample uses pseudo-random selection
- For small collections (< 100 docs), $sample does a collection scan
- For large collections, it uses a more efficient random cursor
- Sample is executed BEFORE any filtering, so filter first for better performance
*/

These solution may give errors because of the driver updates !!!!
